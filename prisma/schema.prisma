generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  customer
  partner
  admin
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(customer)
  createdAt DateTime @default(now())

  bookings    Booking[]
  experiences Experience[] @relation("BusinessExperiences")
  images      Image[]      @relation("UserImages")
}

model Category {
  id           Int      @id @default(autoincrement())
  name         String
  slug         String   @unique
  description  String?

  parentId    Int?
  parent      Category? @relation("Subcategories", fields: [parentId], references: [id])
  children    Category[] @relation("Subcategories")

  featuredImageId Int?
  featuredImage   Image?    @relation("CategoryFeaturedImage", fields: [featuredImageId], references: [id])

  experiences     Experience[]

  categoryTags CategoryTag[]

  imageGallery    ImageGallery?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagGroup {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  sortOrder   Int       @default(0)

  tags        Tag[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id           Int          @id @default(autoincrement())
  name         String
  slug         String       @unique
  description  String?
  color        String?
  icon         String?
  isFilterable Boolean      @default(true)
  sortOrder    Int          @default(0)

  groupId      Int?
  group        TagGroup?    @relation(fields: [groupId], references: [id])

  experienceTags           ExperienceTag[]

  recommendedInCategories  CategoryTag[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([groupId, sortOrder])
}

model ExperienceTag {
  experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId Int

  tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        Int

  @@id([experienceId, tagId])
  @@index([tagId])
  @@index([experienceId])
}

model CategoryTag {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@id([categoryId, tagId])
  @@index([tagId])
}

model Experience {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  description  String
  locationId  Int?
  location    Location? @relation(fields: [locationId], references: [id])
  available    Boolean  @default(true)
  createdAt    DateTime @default(now())

  businessId   Int
  business     User     @relation("BusinessExperiences", fields: [businessId], references: [id])

  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])

  experienceTags ExperienceTag[]
  bookings     Booking[]

  featuredImageId Int?
  featuredImage   Image?  @relation("ExperienceFeaturedImage", fields: [featuredImageId], references: [id])

  imageGallery    ImageGallery?

  pricing      ExperiencePricing? 
}

model Booking {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String   @default("pending")
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id])
}

model Image {
  id            Int           @id @default(autoincrement())
  url           String
  alt           String?
  caption       String?
  fileName      String?
  mimeType      String?
  fileSizeKb    Int?
  width         Int?
  height        Int?
  createdAt     DateTime      @default(now())

  uploadedById  Int?
  uploadedBy    User?         @relation("UserImages", fields: [uploadedById], references: [id])

  featuredInExperiences Experience[] @relation("ExperienceFeaturedImage")
  featuredInCategories  Category[]   @relation("CategoryFeaturedImage")

  galleryImages GalleryImage[]
}

model GalleryImage {
  id            Int         @id @default(autoincrement())
  order         Int        

  imageGallery  ImageGallery @relation(fields: [imageGalleryId], references: [id])
  imageGalleryId Int

  image         Image       @relation(fields: [imageId], references: [id])
  imageId       Int

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([imageGalleryId, imageId])
}

model ImageGallery {
  id            Int           @id @default(autoincrement())
  experience     Experience?   @relation(fields: [experienceId], references: [id])
  experienceId   Int?          @unique

  category       Category?     @relation(fields: [categoryId], references: [id])
  categoryId     Int?          @unique

  galleryImages  GalleryImage[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}



model ExperiencePricing {
  id           Int         @id @default(autoincrement())
  experience   Experience  @relation(fields: [experienceId], references: [id])
  experienceId Int         @unique

  currency     String      @default("EUR")
  options      Json        
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum DurationUnit {
  day
  hour
  half_day
  event
  custom
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  type        LocationType
  coordinates Json?        //  { lat, lng }
  boundingBox Json?        //  { sw: { lat, lng }, ne: { lat, lng } }
  placeId     String?
  country     String?
  locality    String?
  adminArea   String?

  experiences Experience[] 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum LocationType {
  point
  region
}
